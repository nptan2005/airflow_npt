---
x-airflow-common: &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_CONTAINER_NAME}
  build:
    context: .
    dockerfile: ./airflow.Dockerfile
    args:
      # AIRFLOW_IMAGE_NAME: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5-python3.12}
      AIRFLOW_IMAGE_NAME: ${AIRFLOW_IMAGE_NAME}
  environment: &airflow-common-env # AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__EXECUTOR: ${EXECUTOR}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth
    AIRFLOW__WEBSERVER__WORKERS: 2 # Giảm số worker nếu tài nguyên hạn chế
    AIRFLOW__WEBSERVER__WEB_SERVER_TIMEOUT: 300 # Tăng timeout cho Webserver
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__WEBSERVER__RATELIMIT_STORAGE_URL: redis://redis:6379/0
    AIRFLOW__FAB__UPDATE_FAB_PERMS: True
    AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: "false" # Giúp scheduler không chạy DAG đã lùi quá nhiều (nếu không cần)
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "30" # Kiểm tra DAG mới sau mỗi 30s (giảm load so với mặc định là 5s)
    AIRFLOW__CORE__PARALLELISM: "32" # Tổng số task song song có thể chạy, điều chỉnh theo tài nguyên
    AIRFLOW__CELERY__WORKER_CONCURRENCY: "4" # Số lượng task mỗi worker có thể chạy song song
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: "1" # Tránh chạy nhiều DAG cùng lúc, tránh trùng lặp task
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true" # Hiện/Ẩn thông tin cấu hình khỏi UI, tăng bảo mật
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True" # Bắt buộc nếu bạn dùng reverse proxy (nginx)
    AIRFLOW__WEBSERVER__COOKIE_SECURE: "True" # Dùng HTTPS
    AIRFLOW__WEBSERVER__COOKIE_SAMESITE: "Lax"
    AIRFLOW__WEBSERVER__COOKIE_HTTPONLY: "True"
    AIRFLOW__LOGGING__LOGGING_LEVEL: "INFO" # Hoặc DEBUG khi cần gỡ lỗi
    # AIRFLOW__LOGGING__LOGGING_CONFIG_CLASS: airflow_local_settings.LOGGING_CONFIG
    AIRFLOW__SCHEDULER__USE_JOB_SCHEDULE: "True"
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: "false" #True: Cho phép sử dụng pickle (có thể gây rủi ro bảo mật nếu không kiểm soát được dữ liệu). / False: Sử dụng JSON để serialize (an toàn hơn). >>> =False để tăng cường bảo mật.
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
    PYTHONPATH: /opt/airflow/plugins:/opt/airflow/dags:/opt/airflow/modules:/opt/airflow/config:/opt/airflow/scripts:$PYTHONPATH
    CONFIG_PATH: /opt/airflow/config
    LOG_PATH: /opt/airflow/logs
    BIN_PATH: /opt/airflow/bin
    # AIRFLOW__DEBUG_PORT: 5678
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
    - ./modules:/opt/airflow/modules
    - ./data:/opt/airflow/data
    - ./sftp_dir:/opt/airflow/sftp_dir
    - ./bin:/opt/airflow/bin
  user: root
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
networks:
  airflow-network:
    driver: bridge

services:
  postgres:
    image: postgres:13
    # container_name: airflow-postgres
    mem_limit: ${POSTGRES_MEM}
    cpus: ${POSTGRES_CPU}
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    ports:
      - "5432:5432" # ✅ Expose cổng để truy cập từ bên ngoài
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
  init-db:
    image: postgres:13
    depends_on:
      - postgres
    entrypoint: >
      bash -c "
        until pg_isready -U airflow -h postgres; do sleep 2; done;
        shopt -s nullglob;
        files=(/docker-entrypoint-initdb.d/*.sql);
        if [ $${#files[@]} -eq 0 ]; then
          echo 'No .sql files found!';
          exit 0;
        fi
        for f in \"$${files[@]}\"; do
          echo Running $$f;
          psql -U airflow -h postgres -d airflow -f $$f;
        done
      "
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
      PGPASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
    networks:
      - airflow-network
    volumes:
      - ./sql:/docker-entrypoint-initdb.d:ro
    restart: "no"
  redis:
    image: redis:latest
    # container_name: airflow-redis
    mem_limit: ${REDIS_MEM}
    cpus: ${REDIS_CPU}
    ports:
      - "6379:6379"
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    # container_name: airflow-webserver
    mem_limit: ${AIRFLOW_WEB_MEM} #1500m
    cpus: ${AIRFLOW_WEB_CPU} #1.5
    command: standalone # or api-server | standalone: Chạy Airflow ở chế độ "all-in-one" | api-server: Chỉ chạy Airflow API server (REST API). Không chạy web UI.
    ports:
      - 8080:8080
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    mem_limit: ${AIRFLOW_SCHED_MEM}
    cpus: ${AIRFLOW_SCHED_CPU}
    command: scheduler
    networks:
      - airflow-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    # container_name: airflow-worker
    mem_limit: ${AIRFLOW_WORKER_MEM}
    cpus: ${AIRFLOW_WORKER_CPU}
    command: celery worker
    networks:
      - airflow-network
    restart: always

  airflow-init:
    <<: *airflow-common
    # container_name: airflow-init
    mem_limit: ${AIRFLOW_INIT_MEM}
    cpus: ${AIRFLOW_INIT_CPU}
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    networks:
      - airflow-network
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    # container_name: airflow-cli
    mem_limit: ${AIRFLOW_CLI_MEM}
    cpus: ${AIRFLOW_CLI_CPU}
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  acess-host-proxy:
    image: nginx:latest
    # container_name: access-host-proxy
    mem_limit: ${NGINX_MEM}
    cpus: ${NGINX_CPU}
    network_mode: host # Đảm bảo sử dụng IP của server
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - airflow-webserver
    restart: always
  # haproxy:
  #   image: haproxy:latest
  #   mem_limit: ${HAPROXY_MEM}
  #   cpus: ${HAPROXY_CPU}
  #   ports:
  #     # - "443:443"
  #     - "5432:5432"
  #   volumes:
  #     - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
  #     - ./haproxy/certs/server.pem:/usr/local/etc/haproxy/server.pem:ro
  flower:
    <<: *airflow-common
    # container_name: airflow-flower
    mem_limit: ${AIRFLOW_FLOWER_MEM}
    cpus: ${AIRFLOW_FLOWER_CPU}
    command: celery flower
    networks:
      - airflow-network
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
volumes:
  postgres-db-volume:
